<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hooni</title>
    <link>https://vhrehfdl.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>IT Blog</description>
    <pubDate>Tue, 28 Apr 2020 05:06:40 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>ImportError: No module named pandas</title>
      <link>https://vhrehfdl.github.io/2020/04/28/error_set/pandas_install/</link>
      <guid>https://vhrehfdl.github.io/2020/04/28/error_set/pandas_install/</guid>
      <pubDate>Tue, 28 Apr 2020 04:48:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;Error Message : ‘ImportError: No module named pandas’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>Error Message : ‘ImportError: No module named pandas’</li></ul><p>​<a id="more"></a></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><ul><li>pandas가 설치되어 있는데도 pandas module이 없다고 나오는 경우가 있다.</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>두가지 방법이 있는데 대부분 첫번째 방법으로 해결된다.</p><ol><li>최신버전으로 업데이트해 설치한다.</li></ol><figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pandas <span class="hljs-comment"># 최신 버전으로 업그레이드.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">pip install pandas==<span class="hljs-number">0.23</span> <span class="hljs-comment"># 지정된 버전으로 업그레이드.</span></span></pre></td></tr></table></figure><ol start="2"><li>가상환경을 만들 때 pip가 제대로 설치되지 않은 경우</li></ol><figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line">source activate py3</span></pre></td></tr><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span></pre></td></tr><tr><td class="code"><pre><span class="line">python -m ensurepip</span></pre></td></tr><tr><td class="code"><pre><span class="line">python -m ensurepip --upgrade</span></pre></td></tr><tr><td class="code"><pre><span class="line">python -m ensurepip --default-pip</span></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2020/04/28/error_set/pandas_install/#disqus_thread</comments>
    </item>
    
    <item>
      <title>khaiii_install</title>
      <link>https://vhrehfdl.github.io/2020/03/10/setting/khaiii-install/</link>
      <guid>https://vhrehfdl.github.io/2020/03/10/setting/khaiii-install/</guid>
      <pubDate>Tue, 10 Mar 2020 13:10:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;카카오 형태소 분석기 설치.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>카카오 형태소 분석기 설치.</li></ul><a id="more"></a><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><hr><ol><li><p>CMAKE 환경 설정</p><ul><li><p>카카오 형태소 분석기를 사용하려면 cmake가 설치되어 있어야 한다.</p></li><li><p>주의해햐 할 점은 cmake 3.10 이상의 버전을 설치해야 하기 때문에 update를 해주어야 한다.</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">sudo -E apt-get update</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo apt-get install cmake</span></pre></td></tr></table></figure></li><li><p>만약에 위에 명령어로 설치가 안 될 경우에는 pip로 설치해보자.</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">pip install cmake</span></pre></td></tr></table></figure></li></ul></li></ol><ol start="2"><li><p>Khaiii 설치</p><ul><li><p>아래의 명령어를 쭉 따라하면 khaiii가 설치된다.</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/kakao/khaiii</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-built_in">cd</span> khaiii</span></pre></td></tr><tr><td class="code"><pre><span class="line">mkdir build</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-built_in">cd</span> build</span></pre></td></tr><tr><td class="code"><pre><span class="line">cmake ..</span></pre></td></tr><tr><td class="code"><pre><span class="line">make package_python</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-built_in">cd</span> package_python</span></pre></td></tr><tr><td class="code"><pre><span class="line">pip install .</span></pre></td></tr></table></figure><p>​</p></li></ul></li><li><p>코드 테스트</p><ul><li><p>build 경로 아래에 test.py를 만들고 실행을 시켜면 된다.</p><figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> khaiii <span class="hljs-keyword">import</span> KhaiiiApi</span></pre></td></tr><tr><td class="code"><pre><span class="line">api = KhaiiiApi()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> api.analyze(<span class="hljs-string">'안녕, 세상.'</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(word)</span></pre></td></tr></table></figure></li></ul></li></ol>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2020/03/10/setting/khaiii-install/#disqus_thread</comments>
    </item>
    
    <item>
      <title>tensorflow load error</title>
      <link>https://vhrehfdl.github.io/2020/01/08/error_set/tensorflow_error/</link>
      <guid>https://vhrehfdl.github.io/2020/01/08/error_set/tensorflow_error/</guid>
      <pubDate>Wed, 08 Jan 2020 04:25:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;tensorflow.python.framework.errors_impl.UnknownError: 2 root error(s) found.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>tensorflow.python.framework.errors_impl.UnknownError: 2 root error(s) found.</li></ul><a id="more"></a><ul><li>에러 메세지</li></ul><center><img src="/images/error_set/20200108_1312.PNG" width="100%"></center><br><ul><li><p>문제 원인</p><ul><li><p>처음에는 CUDA 버전 에러인 줄 알았다. (2080TI에 CUDA 10 사용 중)</p></li><li><p>그런데 저 에러가 뜨는 코드가 있고 안 뜨는 코드가 있었다.</p></li><li><p>그래서 cuda 버전 에러가 아닐 수도 있겠다고 생각했고 찾아본 결과 GPU 메모리 에러였다.</p></li><li><p>GPU 메모리를 초과해서 사용하는 경우 이런 에러가 발생할 수 있다고 했다.</p></li></ul></li></ul><ul><li><p>해결 방법 : gpu_memory를 적당양 사용하니까 문제가 해결됬다. ( 여기서는 75% 사용 )</p>  <figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-comment"># Tensor 환경 설정</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_env</span><span class="hljs-params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    os.environ[<span class="hljs-string">'CUDA_VISIBLE_DEVICES'</span>] = <span class="hljs-string">'0'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    config = tf.ConfigProto()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    config.gpu_options.per_process_gpu_memory_fraction = <span class="hljs-number">0.75</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    session = tf.Session(config=config)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    session</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">set_env()</span></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2020/01/08/error_set/tensorflow_error/#disqus_thread</comments>
    </item>
    
    <item>
      <title>scipy import error</title>
      <link>https://vhrehfdl.github.io/2020/01/08/error_set/scipy_error/</link>
      <guid>https://vhrehfdl.github.io/2020/01/08/error_set/scipy_error/</guid>
      <pubDate>Wed, 08 Jan 2020 04:14:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;ImportError: cannot import name ‘imresize’ from ‘scipy.misc’ &lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>ImportError: cannot import name ‘imresize’ from ‘scipy.misc’ </li></ul><a id="more"></a><ul><li>Solution : Scipy를 1.1버전으로 downgrade 하면 된다. 버전 에러였다.</li></ul>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2020/01/08/error_set/scipy_error/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CUDNN_STATUS_EXECUTION_FAILED</title>
      <link>https://vhrehfdl.github.io/2020/01/02/error_set/pytorch_error-1/</link>
      <guid>https://vhrehfdl.github.io/2020/01/02/error_set/pytorch_error-1/</guid>
      <pubDate>Thu, 02 Jan 2020 10:30:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;Error Message : RuntimeError: cuDNN error: CUDNN_STATUS_EXECUTION_FAILED&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>Error Message : RuntimeError: cuDNN error: CUDNN_STATUS_EXECUTION_FAILED</li></ul><a id="more"></a><h2 id="문제-원인"><a href="#문제-원인" class="headerlink" title="문제 원인"></a>문제 원인</h2><hr><ul><li><p>pytorch의 GPU가 문제가 발생했다.</p></li><li><p>최근의 GPU를 2080TI로 변경했는데 이게 문제였다.</p></li><li><p>GPU 2080TI로 하고 CUDA 9점대 버전을 사용하면 Pytorch가 제대로 인식을 못하는 에러가 발생한다.</p></li></ul><h2 id="문제-해결-방법"><a href="#문제-해결-방법" class="headerlink" title="문제 해결 방법"></a>문제 해결 방법</h2><hr><ul><li><p>해결방법은 간단한다.<br>CUDA를 10점대 버전으로 업데이트 한다.</p></li><li><p>그리고 pytorch를 업데이트 한다.</p>  <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision cudatoolkit=10.0 -c pytorch</span></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2020/01/02/error_set/pytorch_error-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Pytorch Window 설치 (CUDA)</title>
      <link>https://vhrehfdl.github.io/2020/01/02/setting/pytorch_install/</link>
      <guid>https://vhrehfdl.github.io/2020/01/02/setting/pytorch_install/</guid>
      <pubDate>Thu, 02 Jan 2020 06:12:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;pytorch install 기록&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window에 CUDA와 CuDNN 설정되어 있다고 가정.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>pytorch install 기록</p><ul><li>window에 CUDA와 CuDNN 설정되어 있다고 가정.</li></ul><a id="more"></a>​<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><hr><ol><li><p>window의 CUDA 버전확인</p><ul><li><p>window CMD 창에서 입력.</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">nvcc --version</span></pre></td></tr></table></figure></li><li><p>명령어를 입력하면 9점대 버전인 것을 확인할 수 있다.</p><center><img src="/images/setting/20200102_1512.PNG" alt="cmd 결과"></center><br></li></ul></li></ol><ol start="2"><li><p>해당 버전에 맞는 Pytorch 설치</p><ul><li><p>pytorch는 anaconda에서 설치하는 것이 편하다.</p></li><li><p>anaconda prompt 창에서 입력. (설치하고 싶은 가상환경 activate후 입력)</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision cudatoolkit=9.0 -c pytorch</span></pre></td></tr></table></figure></li></ul></li></ol><h2 id="설치-확인"><a href="#설치-확인" class="headerlink" title="설치 확인"></a>설치 확인</h2><hr><p>torch를 불러오고 device_name을 확인한다.</p><figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> torch</span></pre></td></tr><tr><td class="code"><pre><span class="line">torch.cuda.get_device_name(<span class="hljs-number">0</span>)</span></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2020/01/02/setting/pytorch_install/#disqus_thread</comments>
    </item>
    
    <item>
      <title>VScode SFTP 연결 방법</title>
      <link>https://vhrehfdl.github.io/2020/01/01/setting/vscode_sftp/</link>
      <guid>https://vhrehfdl.github.io/2020/01/01/setting/vscode_sftp/</guid>
      <pubDate>Wed, 01 Jan 2020 06:46:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;VSCODE SFTP 연결 방법 기록.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>VSCODE SFTP 연결 방법 기록.</li></ul><a id="more"></a>​<ol><li><p>Extensions에서 SFTP 설치</p><p> VSCODE 확장기능 TAB에서 SFTP를 설치한다.</p> <center><img src="/images/setting/20200101_1546.PNG"></center><br></li><li><p>sftp.json 파일을 설정한다.</p><ul><li><p>F1을 누르고 sftp.json를 입력한다.</p><center><img src="/images/setting/20200101_1547.PNG"></center><br></li><li><p>sftp.json의 서버 접속하는데 필요한 정보를 입력한다.</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="hljs-string">"name"</span>: <span class="hljs-string">"My Server"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="hljs-string">"host"</span>: <span class="hljs-string">"IP주소 입력"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="hljs-string">"protocol"</span>: <span class="hljs-string">"sftp"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="hljs-string">"port"</span>: 22,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="hljs-string">"username"</span>: <span class="hljs-string">"Username 입력"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="hljs-string">"password"</span>: <span class="hljs-string">"비밀번호 입력"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="hljs-string">"remotePath"</span>: <span class="hljs-string">"/var/www/html/MyResume/"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="hljs-string">"uploadOnSave"</span>: <span class="hljs-literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul></li><li><p>서버에서 폴더를 다운로드 한다.</p><ul><li><p>SFTP: Download Project를 하면 서버에 저장되어 있던 파일이 로컬로 저장된다.</p><center><img src="/images/setting/20200101_1548.PNG"></center><br></li></ul></li></ol><ol start="3"><li><p>서버에서 폴더를 업로드 한다.</p><ul><li><p>SFTP: Upload Project를 하면 로컬 파일이 서버에 업로드 된다.</p><center><img src="/images/setting/20200101_1548.PNG"></center><br></li></ul></li></ol>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2020/01/01/setting/vscode_sftp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>EmoContext 소개</title>
      <link>https://vhrehfdl.github.io/2019/12/25/emocontext/intro/</link>
      <guid>https://vhrehfdl.github.io/2019/12/25/emocontext/intro/</guid>
      <pubDate>Wed, 25 Dec 2019 11:30:00 GMT</pubDate>
      <description>
      
      </description>
      
      
      <comments>https://vhrehfdl.github.io/2019/12/25/emocontext/intro/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo 블로그 테마 적용</title>
      <link>https://vhrehfdl.github.io/2019/12/25/setting/hexo_blog_icarus/</link>
      <guid>https://vhrehfdl.github.io/2019/12/25/setting/hexo_blog_icarus/</guid>
      <pubDate>Wed, 25 Dec 2019 08:41:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;github에 hexo 블로그에 icarus 테마 입히기.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gihub + hexo 블로그 초기 세팅은 &lt;a href=&quot;../hexo_blog&quot;&gt;이전글&lt;/a&gt; 에서 확인.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li><p>github에 hexo 블로그에 icarus 테마 입히기.</p></li><li><p>gihub + hexo 블로그 초기 세팅은 <a href="../hexo_blog">이전글</a> 에서 확인.</p></li></ul><a id="more"></a>​<h2 id="hexo-icarus-테마-적용"><a href="#hexo-icarus-테마-적용" class="headerlink" title="hexo icarus 테마 적용."></a>hexo icarus 테마 적용.</h2><hr><ol><li><p>icarus 테마 git에서 다운.</p><ul><li><p>코드</p>  <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-built_in">cd</span> myblog</span></pre></td></tr><tr><td class="code"><pre><span class="line">git <span class="hljs-built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span></pre></td></tr></table></figure></li><li><p>실행 결과</p><center><img src="/images/setting/20191225_1741.png"></center><br></li></ul></li></ol><ol start="2"><li><p>theme을 바꿔준다.</p><ul><li><p>/myblog/_config.yml 에 들어가서 변경해준다.</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-comment"># Extensions</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-comment">## Themes: https://hexo.io/themes/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">theme: icarus</span></pre></td></tr></table></figure></li></ul></li></ol><h2 id="주의-사항"><a href="#주의-사항" class="headerlink" title="주의 사항"></a>주의 사항</h2><hr><ul><li>_config.yml은 두개가 있다.</li><li>첫번째로 /myblog/_config.yml이 있고 hexo 블로그의 전반적인 사항을 관리한다.</li><li>두번째로 /themes/icarus/_config.yml이 있다. icarus 테마의 관련된 사항을 관리한다.</li></ul>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/12/25/setting/hexo_blog_icarus/#disqus_thread</comments>
    </item>
    
    <item>
      <title>github hexo 블로그 만들기</title>
      <link>https://vhrehfdl.github.io/2019/12/25/setting/hexo_blog/</link>
      <guid>https://vhrehfdl.github.io/2019/12/25/setting/hexo_blog/</guid>
      <pubDate>Wed, 25 Dec 2019 07:30:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;github에 hexo 블로그 초기 설정.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;가장 초기 단계 블로그 설정으로써 github에 hexo 기본 블로그를 설정한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li><p>github에 hexo 블로그 초기 설정.</p></li><li><p>가장 초기 단계 블로그 설정으로써 github에 hexo 기본 블로그를 설정한다.</p></li></ul><a id="more"></a>​<h2 id="초기-설정"><a href="#초기-설정" class="headerlink" title="초기 설정"></a>초기 설정</h2><hr><ol><li><p>node.js 설치</p><ul><li><p>[Download] : <a href="https://javacpro.tistory.com/62" target="_blank" rel="noopener">https://javacpro.tistory.com/62</a></p></li><li><p>여기서 사용할 hexo는 node 기반이라 node.js가 설치되어 있어야 한다.</p></li></ul></li></ol><ol start="2"><li><p>git 설치</p><ul><li><p>[Download] : <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p></li><li><p>github과 연동시키기 위해서는 git이 기본적으로 설치되어 있어야 한다.</p></li></ul></li></ol><ol start="3"><li><p>hexo 설치 </p><ul><li><p>hexo를 설치한다.</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span></pre></td></tr></table></figure></li></ul></li><li><p>블로그 설정</p><ul><li><p>블로그 폴더를 설치하고 hexo를 초기화한다.</p>  <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-built_in">cd</span> myblog</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install</span></pre></td></tr></table></figure></li><li><p>완료되면 아래와 같이 구조가 생성된다.</p>  <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">.</span></pre></td></tr><tr><td class="code"><pre><span class="line">├── _config.yml</span></pre></td></tr><tr><td class="code"><pre><span class="line">├── package.json</span></pre></td></tr><tr><td class="code"><pre><span class="line">├── scaffolds</span></pre></td></tr><tr><td class="code"><pre><span class="line">├── <span class="hljs-built_in">source</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">|   ├── _drafts</span></pre></td></tr><tr><td class="code"><pre><span class="line">|   └── _posts</span></pre></td></tr><tr><td class="code"><pre><span class="line">└── themes</span></pre></td></tr></table></figure></li></ul></li></ol><ol start="5"><li><p>실행</p><ul><li><p>hexo는 파일 구조를 generate해주고 server에 띄워주는 방법으로 이루어진다.</p>  <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">hexo g</span></pre></td></tr><tr><td class="code"><pre><span class="line">hexo s</span></pre></td></tr></table></figure></li><li><p>이렇게 실행시킨 후에 localhost:4000으로 접속하면 자신의 블로그를 볼 수 있다.</p></li></ul></li></ol><ol start="6"><li>만든 블로그 github에 올리기<ul><li>github에 username.github.io 형식으로 repository를 생성한다.</li></ul></li></ol><ol start="7"><li>/myblog/_config.yml 파일에 deploy 관련 코드를 추가해준다. <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-comment"># Deployment</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deploy: </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-built_in">type</span>: git</span></pre></td></tr><tr><td class="code"><pre><span class="line">repo: repository 주소</span></pre></td></tr><tr><td class="code"><pre><span class="line">branch: master</span></pre></td></tr></table></figure></li></ol><ol start="8"><li>git deploy plugin 설치 <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span></pre></td></tr></table></figure></li></ol><ol start="9"><li>github 배포<ul><li>hexo generate를 다시하고 deploy를 시켜준다.<figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">hexo g</span></pre></td></tr><tr><td class="code"><pre><span class="line">hexo d</span></pre></td></tr></table></figure></li></ul></li></ol><h2 id="hexo-블로그-백업-관리"><a href="#hexo-블로그-백업-관리" class="headerlink" title="hexo 블로그 백업 관리"></a>hexo 블로그 백업 관리</h2><hr><ul><li><p>hexo 블로그 하면서 여러 기기에서 작성하고 싶을 때 어떻게 해야 할 지 고민이였다. 검색을 해봐도 어떻게 해야 할지 나와있지 않아 그냥 알아서 했다.</p></li><li><p>git에 새로운 repository를 만든다. 공개하기 싶다면 private 모드로 만들면 된다.</p></li><li><p><strong>git push 하기 전에 gitignore 파일을 제거해준다.</strong> gitignore 파일이 있으면 몇몇 폴더와 파일들이 git에 올려지지 않기 때문에 제거해준다. 아마 숨긴파일로 되어 있기 때문에 보기 조건을 풀어주고 찾아서 제거한다.</p></li><li><p>myblog에 git repository를 생성한다.</p>  <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">git init</span></pre></td></tr><tr><td class="code"><pre><span class="line">git config --global user.name <span class="hljs-string">"your name"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">git config --global user.email yourmail</span></pre></td></tr><tr><td class="code"><pre><span class="line">git add .</span></pre></td></tr><tr><td class="code"><pre><span class="line">git commit -m <span class="hljs-string">"init commit"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">git push origin master</span></pre></td></tr></table></figure></li><li><p>만약 다른 기기에서 사용하려면 <code>bash hexo init 폴더명</code> 을 사용해 생성해주고 git pull을 하여 git에서 받아와 하던데로 작업을 해주면 된다.</p></li><li><p>이게 옳은 방법인지는 모르겠지만 문제없이 되기는 한다.</p></li></ul><center><img src="/images/setting/20191225_1848.png" alt="git backup repository"></center><br>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/12/25/setting/hexo_blog/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Nginx + Flask + Uwsgi 초기 세팅</title>
      <link>https://vhrehfdl.github.io/2019/11/09/setting/nginx_flask_uwsgi/</link>
      <guid>https://vhrehfdl.github.io/2019/11/09/setting/nginx_flask_uwsgi/</guid>
      <pubDate>Sat, 09 Nov 2019 06:20:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;Nginx + Flask + Uwsgi 초기 세팅 기록.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>Nginx + Flask + Uwsgi 초기 세팅 기록.</li></ul><a id="more"></a>​<h2 id="설치-및-실행"><a href="#설치-및-실행" class="headerlink" title="설치 및 실행"></a>설치 및 실행</h2><hr><ol><li>Nginx, Flask, Uwsgi를 설치한다. <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">pip3 install nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line">pip3 install uwsgi</span></pre></td></tr><tr><td class="code"><pre><span class="line">pip3 install flask</span></pre></td></tr><tr><td class="code"><pre><span class="line">pip3 install uwsgi-plugin-python</span></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>Flask 실행</p><ul><li><p>test.py 라는 파일을 만들고 실행하여 결과를 확인한다.</p>  <figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask</span></pre></td></tr><tr><td class="code"><pre><span class="line">application = Flask(__name__)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-meta">@application.route("/")</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">"&lt;h1&gt;Hello!&lt;/h1&gt;"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    application.run(host=<span class="hljs-string">'0.0.0.0'</span>)</span></pre></td></tr></table></figure></li><li><p>curl 명령어를 실행해서 확인해본다.</p>  <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">curl http://localhost:5000</span></pre></td></tr></table></figure></li></ul></li></ol><ol start="3"><li><p>uwsgi 파일 만들기</p> <figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> test <span class="hljs-keyword">import</span> application</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    application.run()</span></pre></td></tr></table></figure><p> curl 명령어를 실행시켜 확인</p> <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">uwsgi --socket 0.0.0.0:5000 --protocol=http -w wsgi</span></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>ini 파일을 만든다.</p><ul><li><p>매번 uwsgi 파일을 실행시킬 때 명령어를 써줄 수 없으니 파일을 만들어둔다.</p></li><li><p>socket 파일은 아래 실행 명령어를 실행시키면 자동으로 생성 되어진다.</p>  <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="hljs-built_in">chdir</span> = /var/www/html/StoryAI/storyai/web</span></pre></td></tr><tr><td class="code"><pre><span class="line">module = wsgi</span></pre></td></tr><tr><td class="code"><pre><span class="line">socket = /tmp/myproject.sock</span></pre></td></tr><tr><td class="code"><pre><span class="line">chmod-socket = 666</span></pre></td></tr></table></figure></li><li><p>실행 명령어</p>  <figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">uwsgi --ini myproject.ini</span></pre></td></tr></table></figure></li></ul></li></ol><ol start="5"><li><p>nginx의 환경설정을 변경한다.</p><ul><li><p>/etc/nginx/sites-avilable/defalut</p></li><li><p>다른 예제들에서는 location @app을 설정해서 하는데 이거 인식이 잘 안되서 location / { 부분에 설정을 해주니까 되었다.</p></li><li><p>sock 파일을 통해서 서로 연결되어진다.</p></li><li><p>여기서 실수 했던게 try_files $url $url\ =404; 부분을 주석처리 안하니까 app.route를 다른걸 설정하니까 접속이 되지 않았다. 뻘짓했다.</p><center><img src="/images/setting/20191109_1520.png"></center><br></li></ul></li></ol><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><hr><ul><li><p>[URL] : <a href="https://cjh5414.github.io/flask-uwsgi-nginx/" target="_blank" rel="noopener">https://cjh5414.github.io/flask-uwsgi-nginx/</a></p></li><li><p>[URL] : <a href="https://whatisthenext.tistory.com/124" target="_blank" rel="noopener">https://whatisthenext.tistory.com/124</a></p></li><li><p>[URL] : <a href="https://twpower.github.io/43-run-uwsgi-by-using-ini-file" target="_blank" rel="noopener">https://twpower.github.io/43-run-uwsgi-by-using-ini-file</a></p></li></ul>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/11/09/setting/nginx_flask_uwsgi/#disqus_thread</comments>
    </item>
    
    <item>
      <title>EC2 Instance 웹서버 설치 후 구동하기</title>
      <link>https://vhrehfdl.github.io/2019/11/08/setting/aws_port_open/</link>
      <guid>https://vhrehfdl.github.io/2019/11/08/setting/aws_port_open/</guid>
      <pubDate>Fri, 08 Nov 2019 14:17:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;EC2 Webserver 설치 후 구동 기록.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>EC2 Webserver 설치 후 구동 기록.</li></ul><a id="more"></a>​<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><hr><p>Nginx를 설치하고 IPv4 퍼블릭 IP 주소 값으로 접근을 했는데 되지 않았다.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><hr><p>방화벽에 80번 포트를 추가해주어야 한다.</p><center><img src="/images/setting/20191108_2317.png"></center><br><ul><li><p>Descripttion에 Security group의 launch-wizard를 선택한다.</p></li><li><p>Inbound 탭을 누른다.</p></li><li><p>Edit 버튼을 누르고 Add Rule 버튼을 클릭한다.</p><center><img src="/images/setting/20191108_2318.png"></center><br></li></ul><p>이렇게 추가하고 들어가면 끝!</p><p>접속이 될 것 이다.</p><h2 id="참고-URL"><a href="#참고-URL" class="headerlink" title="참고 URL"></a>참고 URL</h2><hr><p><a href="https://medium.com/@taeyeolkim/aws-ec2%EC%97%90-%EC%9B%B9%EC%84%9C%EB%B2%84-nginx-%EC%84%A4%EC%B9%98%ED%95%98%EA%B3%A0-%EA%B5%AC%EB%8F%99%ED%95%98%EA%B8%B0-a46a6e9484a8" target="_blank" rel="noopener">https://medium.com/@taeyeolkim/aws-ec2%EC%97%90-%EC%9B%B9%EC%84%9C%EB%B2%84-nginx-%EC%84%A4%EC%B9%98%ED%95%98%EA%B3%A0-%EA%B5%AC%EB%8F%99%ED%95%98%EA%B8%B0-a46a6e9484a8</a></p>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/11/08/setting/aws_port_open/#disqus_thread</comments>
    </item>
    
    <item>
      <title>EC2 Instance 생성 후 putty 접속</title>
      <link>https://vhrehfdl.github.io/2019/11/08/setting/aws_putty/</link>
      <guid>https://vhrehfdl.github.io/2019/11/08/setting/aws_putty/</guid>
      <pubDate>Fri, 08 Nov 2019 14:11:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;EC2에 putty로 접속하는 방법 기록.&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>EC2에 putty로 접속하는 방법 기록.</li></ul><a id="more"></a>​<h2 id="AWS-EC2-Instance-생성"><a href="#AWS-EC2-Instance-생성" class="headerlink" title="AWS EC2 Instance 생성"></a>AWS EC2 Instance 생성</h2><hr><ul><li>[URL] : <a href="https://aws.amazon.com/ko/" target="_blank" rel="noopener">https://aws.amazon.com/ko/</a></li></ul><center><img src="/images/setting/20191108_2311.png"></center><br><ul><li><p>콘솔에 로그인 하기를 한 후 EC2 인스턴스를 생성한다.</p></li><li><p>사실 생성까지는 쉽지만 약간 어려울 수 있는게 보안 그룹에 Key File 부분이 헷갈릴 수 있다.</p></li><li><p>우선 .pem 확장자 파일을 다운 받는다. ( 접속 때 중요하게 사용되어진다. )</p></li></ul><h2 id="AWS-putty-접속"><a href="#AWS-putty-접속" class="headerlink" title="AWS putty 접속"></a>AWS putty 접속</h2><hr><ul><li><p>우선 puttygen을 사용해 .pem 파일을 .ppk 파일로 생성한다.</p></li><li><p>Load 버튼을 클릭한 후에 방금 만들었던 .pem 파일을 선택한다.</p><center><img src="/images/setting/20191108_2312.png" alt="load 버튼 클릭"></center><br></li><li><p>save 버튼을 누르고 이름을 지정한 후 저장한다.</p><center><img src="/images/setting/20191108_2313.png" alt="save 버튼 클릭"></center><br></li><li><p>Host Name에는 퍼블릭 DNS(IPv4)의 주소값을 입력한다.</p><center><img src="/images/setting/20191108_2314.png" alt="host name 입력"></center><br></li><li><p>접속&gt;SSH&gt;AUTH로 가서 Private Key파일을 선택한다.</p><center><img src="/images/setting/20191108_2315.png"></center><br></li></ul><ul><li><p>.ppk 파일을 세팅하고 접속한다.</p></li><li><p>EC2에 접속하면 “login as:”가 화면에 뜨는데 우분투로 설치했다면 ubuntu로 입력한다. ( 처음에 아무생각 없이 root를 했다가 안되었다. )</p></li></ul><h2 id="참고-URL"><a href="#참고-URL" class="headerlink" title="참고 URL"></a>참고 URL</h2><hr><ul><li>[URL] : <a href="https://hyeonstorage.tistory.com/271" target="_blank" rel="noopener">https://hyeonstorage.tistory.com/271</a></li></ul>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/11/08/setting/aws_putty/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ImportError dll load failed 지정된 모듈을 찾을 수 없습니다</title>
      <link>https://vhrehfdl.github.io/2019/09/11/error_set/pytorch_error/</link>
      <guid>https://vhrehfdl.github.io/2019/09/11/error_set/pytorch_error/</guid>
      <pubDate>Wed, 11 Sep 2019 08:33:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;Error Message : ImportError: dll load failed: 지정된 모듈을 찾을 수 없습니다&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>Error Message : ImportError: dll load failed: 지정된 모듈을 찾을 수 없습니다</li></ul><a id="more"></a><h2 id="문제-상황"><a href="#문제-상황" class="headerlink" title="문제 상황"></a>문제 상황</h2><hr><p>import torch는 문제가 없이 잘 되었는데…<br>import torchvision에서 에러가 터졌다.<br>지정된 모듈을 찾을 수 없다는 에러가 터졌다.</p><p>이게 어디서 자주 본 에러여서 기억을 더음어 보니…<br>tensorflow gpu 할 때 본 에러였다.</p><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><hr><ol><li><p>파일 설치해보기</p><ul><li><p>Intel-openmp</p></li><li><p>visual studio 2017 재배포파일</p><p>Intel-openmp는 anaconda 환경에 설치하면 된다.<br>이 방법으로도 해결이 되지 않으면 2번 방법을 적용해보자.</p></li></ul></li></ol><ol start="2"><li><p>torchvision 버전 낮춰보기</p><p> 위에 방법으로 해결되지 않는다면 torchvision 버전을 0.4버전에서 0.2버전으로 낮춰보자.<br> 나는 이렇게 해서 해결했다.<br> 내 cuda 버전과 torchvision 버전이 호환되지 않아서 발생한 문제인 것 같다.</p></li></ol><h2 id="참고-URL"><a href="#참고-URL" class="headerlink" title="참고 URL"></a>참고 URL</h2><hr><ul><li>[URL] : <a href="https://mclearninglab.tistory.com/30" target="_blank" rel="noopener">https://mclearninglab.tistory.com/30</a></li></ul>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/09/11/error_set/pytorch_error/#disqus_thread</comments>
    </item>
    
    <item>
      <title>tensorflow version error</title>
      <link>https://vhrehfdl.github.io/2019/04/08/error_set/tensorflow_version_error/</link>
      <guid>https://vhrehfdl.github.io/2019/04/08/error_set/tensorflow_version_error/</guid>
      <pubDate>Mon, 08 Apr 2019 05:46:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;에러 메세지 : batch() got an unexpected keyword argument ‘drop_remainder’&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;에러 원인 : Tensorflow 버전이 업그레이드 되면서 run_classifier.py의 drop_remainder 파라미터가 없어졌다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;해결 방법 : runclassfier.py 파일에서 drop_remainder 코드를 제거해줘야 한다.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li><p>에러 메세지 : batch() got an unexpected keyword argument ‘drop_remainder’</p></li><li><p>에러 원인 : Tensorflow 버전이 업그레이드 되면서 run_classifier.py의 drop_remainder 파라미터가 없어졌다.</p></li><li><p>해결 방법 : runclassfier.py 파일에서 drop_remainder 코드를 제거해줘야 한다.  </p></li></ul><a id="more"></a><center><img src="/images/error_set/ErrorSet1_1.png" width="100%" alt="변경 전"></center><br><center><img src="/images/error_set/ErrorSet1_2.png" width="100%" alt="변경 후"></center>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/04/08/error_set/tensorflow_version_error/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Loaded runtime CuDNN library 7101</title>
      <link>https://vhrehfdl.github.io/2019/04/07/error_set/tensorflow_gpu_error/</link>
      <guid>https://vhrehfdl.github.io/2019/04/07/error_set/tensorflow_gpu_error/</guid>
      <pubDate>Sun, 07 Apr 2019 07:20:00 GMT</pubDate>
      <description>
      
        
        
          &lt;ul&gt;
&lt;li&gt;&lt;p&gt;에러 메세지 : Loaded runtime CuDNN library: 7101 (compatibility version 7100) but source was compiled with 7003 (c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;에
        
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li><p>에러 메세지 : Loaded runtime CuDNN library: 7101 (compatibility version 7100) but source was compiled with 7003 (c</p></li><li><p>에러 원인 : tensorflow-gpu가 돌아가는 환경설정이  CUDA Toolkit 버전과 cuDNN 버전이 호환되지가 않아서 발생한 문제이다. </p></li><li><p>해결 방법 : Toolkit은 9.0 cuDNN은 7.0.5로 호환해주니 해결되었다.</p></li></ul>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/04/07/error_set/tensorflow_gpu_error/#disqus_thread</comments>
    </item>
    
    <item>
      <title>pandas No module named &#39;pandas.core.internals.managers&#39;</title>
      <link>https://vhrehfdl.github.io/2019/04/07/error_set/pandas_error/</link>
      <guid>https://vhrehfdl.github.io/2019/04/07/error_set/pandas_error/</guid>
      <pubDate>Sun, 07 Apr 2019 03:43:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;Error Message : ModuleNotFoundError: No module named ‘pandas.core.internals.managers’; ‘pandas.core.internals’ is no&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>Error Message : ModuleNotFoundError: No module named ‘pandas.core.internals.managers’; ‘pandas.core.internals’ is no</li></ul><p>​<a id="more"></a></p><h2 id="발생-원인"><a href="#발생-원인" class="headerlink" title="발생 원인"></a>발생 원인</h2><hr><p>A컴퓨터에서 잘 작동했던 파이썬 코드를 B컴퓨터에서 실행시키니 저 error가 계속 발생했다.<br>처음에는 pandas 환경과 Python 버전 환경이 달라서 발생한 줄 알았다.<br>그래서 환경을 똑같이 맞추어줬는데도 계속 에러가 발생했다.<br>일단 에러 발생 부분을 보니 pickle.load() 하는 부분에서 에러가 발생했다.</p><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><hr><p>결국 해결한 방법은 A 컴퓨터에서 pickle 파일 만들 때 pandas.DataFrame으로 넣지 않고  pandas.to_dict()로 바꿔서 파일을 만들었다.<br>B 컴퓨터에서 pickle 파일 불러오고 dict 파일을 pandas.DataFrame으로 넣어서 해결했다.<br>pickle 파일에 데이터 넣을 때 함부로 넣으면 안 되나 보다.</p>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/04/07/error_set/pandas_error/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Tensorflow RuntimeError Missing implementation that supports loader</title>
      <link>https://vhrehfdl.github.io/2019/04/04/error_set/tensorflow_hub_error-1/</link>
      <guid>https://vhrehfdl.github.io/2019/04/04/error_set/tensorflow_hub_error-1/</guid>
      <pubDate>Thu, 04 Apr 2019 02:44:00 GMT</pubDate>
      <description>
      
        
        
          &lt;ul&gt;
&lt;li&gt;&lt;p&gt;에러 메세지 : RuntimeError: Missing implementation that supports: loader(*(‘/tmp/tfhub_modules/mobilenet_module’,)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;해
        
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li><p>에러 메세지 : RuntimeError: Missing implementation that supports: loader(*(‘/tmp/tfhub_modules/mobilenet_module’,)</p></li><li><p>해결 방법 : loader 뒤에 뜨는 에러메세지 경로에 들어가서 tf_hub 파일을 지워주고 다시 실행시키니 작동하였다.<br>이게 갑자기 어느 순간에 에러가 발생하는데… 왜 발생하는지는 모르겠다.<br>그래도 해결방법이 단순하다.</p></li><li><p>참고 URL<br><a href="https://stackoverflow.com/questions/54029556/how-to-fix-runtimeerror-missing-implementation-that-supports-loader-when-cal" target="_blank" rel="noopener">https://stackoverflow.com/questions/54029556/how-to-fix-runtimeerror-missing-implementation-that-supports-loader-when-cal</a></p></li></ul>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/04/04/error_set/tensorflow_hub_error-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Tensorflow ImportError cannot import name &#39;regex_replace&#39;</title>
      <link>https://vhrehfdl.github.io/2019/03/27/error_set/tensorflow_hub_error/</link>
      <guid>https://vhrehfdl.github.io/2019/03/27/error_set/tensorflow_hub_error/</guid>
      <pubDate>Wed, 27 Mar 2019 04:41:00 GMT</pubDate>
      <description>
      
        
        
          &lt;ul&gt;
&lt;li&gt;해결 방법 : ELMo 사용하려고 Tensorflow Hub를 설치하고 실행시켜보니 위에 error 발생!&lt;br&gt;처음에 0.3 버전으로 설치했는데…&lt;br&gt;혹시나 해서 버전 0.2로 낮춰서 해보니 실행이 되었다… &lt;/li&gt;
&lt;/ul&gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>해결 방법 : ELMo 사용하려고 Tensorflow Hub를 설치하고 실행시켜보니 위에 error 발생!<br>처음에 0.3 버전으로 설치했는데…<br>혹시나 해서 버전 0.2로 낮춰서 해보니 실행이 되었다… </li></ul>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/03/27/error_set/tensorflow_hub_error/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Google Colab 사용법 정리</title>
      <link>https://vhrehfdl.github.io/2019/03/22/setting/colab_tutorial/</link>
      <guid>https://vhrehfdl.github.io/2019/03/22/setting/colab_tutorial/</guid>
      <pubDate>Fri, 22 Mar 2019 02:19:00 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;colab 기초 사용법&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>colab 기초 사용법</li></ul><a id="more"></a>​<h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><hr><ol><li><p>Colab에 접속한다.</p><ul><li>[URL] : <a href="https://colab.research.google.com/notebooks/welcome.ipynb" target="_blank" rel="noopener">https://colab.research.google.com/notebooks/welcome.ipynb</a><br>​</li></ul></li><li><p>새로운 python3.ipynb 파일을 만든 후 google drive mount를 한다.</p><ul><li><p>해당 코드를 실행하면 enter authorization code를 입력하라고 창이 뜬다.</p>  <figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> google.colab <span class="hljs-keyword">import</span> drive</span></pre></td></tr><tr><td class="code"><pre><span class="line">drive.mount(<span class="hljs-string">'/content/gdrive'</span>)</span></pre></td></tr></table></figure></li></ul></li></ol><ol start="3"><li><p>authorization code 받는 주소</p><ul><li><p>[URL] : <a href="https://colab.research.google.com/notebooks/io.ipynb#scrollTo=RWSJpsyKqHjH" target="_blank" rel="noopener">https://colab.research.google.com/notebooks/io.ipynb#scrollTo=RWSJpsyKqHjH</a><br>​</p></li><li><p>해당 URL에 들어가면 최종적으로 authorization code를 받을 수 있다.</p><center><img src="/images/setting/20190322_1119.png" alt="tensorboard 실행 이미지"></center><br></li></ul></li></ol><ol start="4"><li><p>foo.txt 파일을 드라이브에 업로드</p> <figure class="highlight python hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-keyword">with</span> open(<span class="hljs-string">'/content/gdrive/My Drive/foo.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    f.write(<span class="hljs-string">'Hello Google Drive!'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">!cat /content/gdrive/My\ Drive/foo.txt</span></pre></td></tr></table></figure><p>​</p></li></ol>]]></content:encoded>
      
      <comments>https://vhrehfdl.github.io/2019/03/22/setting/colab_tutorial/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
